package engine

import (
	"os"
)

func (s *StackSuite) TestStackSuite_YAMLFileParsing() {
	os.Setenv("SHEPHERD_CONFIG_FILE_LOCATION", "./testdata/shepherd_0.yaml")
	os.Setenv("SHEPHERD_TRUSTCERT_1_PEM", "trustedCert1")
	os.Setenv("SHEPHERD_CLIENTCERT_PEM", "clientCert1")
	os.Setenv("SHEPHERD_CLIENTKEY_KEY", "password2")
	os.Setenv("SHEPHERD_CLIENTKEY_KEYPASS", "password1")
	SpdCore.Configs.ParseShepherdConfig(getEnvVarsWithDefaults("SHEPHERD_CONFIG_FILE_LOCATION", ""))
	os.Setenv("SHEPHERD_BLUEPRINTS_FILE_LOCATION", "./testdata/blueprints_0.yaml")
	SpdCore.Blueprints.ParseShepherdBlueprints(getEnvVarsWithDefaults("SHEPHERD_BLUEPRINTS_FILE_LOCATION", ""))

	// Shepherd Cluster file Validation
	s.Equal(".", SpdCore.Configs.ConfigRoot.ShepherdCoreConfig.SeperatorToken, "Separator Token Mismatch")
	s.Equal(false, SpdCore.Configs.ConfigRoot.ShepherdCoreConfig.DeleteUnknownTopics, "Unknown Topic switch mismatch")
	s.Equal(true, SpdCore.Configs.ConfigRoot.ShepherdCoreConfig.DeleteUnknownACLs, "Unknown ACL switch mismatch")

	s.Equal(5, len(SpdCore.Configs.ConfigRoot.Clusters), "Defined Cluster count mismatch")
	s.Equal("dev_plaintext", SpdCore.Configs.ConfigRoot.Clusters[0].Name)
	s.Equal("test_ssl_1WaySSL", SpdCore.Configs.ConfigRoot.Clusters[1].Name)
	s.Equal("test2_sasl_plaintext", SpdCore.Configs.ConfigRoot.Clusters[2].Name)
	s.Equal("test3_sasl_plaintext_scram", SpdCore.Configs.ConfigRoot.Clusters[3].Name)
	s.Equal("test4_confluent_rbac", SpdCore.Configs.ConfigRoot.Clusters[4].Name)

	s.Equal("PLAINTEXT", SpdCore.Configs.ConfigRoot.Clusters[0].Configs[0]["security.protocol"])
	s.Equal("SSL", SpdCore.Configs.ConfigRoot.Clusters[1].Configs[0]["security.protocol"])
	s.Equal("SASL_PLAINTEXT", SpdCore.Configs.ConfigRoot.Clusters[2].Configs[0]["security.protocol"])
	s.Equal("SASL_PLAINTEXT", SpdCore.Configs.ConfigRoot.Clusters[3].Configs[0]["security.protocol"])
	s.Equal("SASL_PLAINTEXT", SpdCore.Configs.ConfigRoot.Clusters[4].Configs[0]["security.protocol"])

	s.Equal("", SpdCore.Configs.ConfigRoot.Clusters[0].Configs[0]["sasl.mechanism"])
	s.Equal("", SpdCore.Configs.ConfigRoot.Clusters[1].Configs[0]["sasl.mechanism"])
	s.Equal("PLAIN", SpdCore.Configs.ConfigRoot.Clusters[2].Configs[0]["sasl.mechanism"])
	s.Equal("SCRAM-SHA-256", SpdCore.Configs.ConfigRoot.Clusters[3].Configs[0]["sasl.mechanism"])
	s.Equal("PLAIN", SpdCore.Configs.ConfigRoot.Clusters[4].Configs[0]["sasl.mechanism"])

	s.Equal("kafka_acl", SpdCore.Configs.ConfigRoot.Clusters[0].ACLManager)
	s.Equal("kafka_acl", SpdCore.Configs.ConfigRoot.Clusters[1].ACLManager)
	s.Equal("kafka_acl", SpdCore.Configs.ConfigRoot.Clusters[2].ACLManager)
	s.Equal("kafka_acl", SpdCore.Configs.ConfigRoot.Clusters[3].ACLManager)
	s.Equal("confluent_mds", SpdCore.Configs.ConfigRoot.Clusters[4].ACLManager)

	s.Equal("sarama", SpdCore.Configs.ConfigRoot.Clusters[0].TopicManager)
	s.Equal("sarama", SpdCore.Configs.ConfigRoot.Clusters[1].TopicManager)
	s.Equal("sarama", SpdCore.Configs.ConfigRoot.Clusters[2].TopicManager)
	s.Equal("sarama", SpdCore.Configs.ConfigRoot.Clusters[3].TopicManager)
	s.Equal("sarama", SpdCore.Configs.ConfigRoot.Clusters[4].TopicManager)

	// Blueprints File Validation
	s.Equal(4, len(SpdCore.Blueprints.Blueprint.Topic.TopicConfigs))
	s.Equal("bronze", SpdCore.Blueprints.Blueprint.Topic.TopicConfigs[0].Name)
	s.Equal("silver", SpdCore.Blueprints.Blueprint.Topic.TopicConfigs[1].Name)
	s.Equal("gold", SpdCore.Blueprints.Blueprint.Topic.TopicConfigs[2].Name)
	s.Equal("platinum", SpdCore.Blueprints.Blueprint.Topic.TopicConfigs[3].Name)

	s.Equal(3, len(SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Defaults[0]))
	s.Equal("2", SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Defaults[0]["replication.factor"])
	s.Equal("1", SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Defaults[0]["min.insync.replicas"])
	s.Equal("5", SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Defaults[0]["num.partitions"])
	s.Equal(1, len(SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Overrides.Whitelist))
	s.Equal("partition.count", SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Overrides.Whitelist[0])
	s.Equal(2, len(SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Overrides.Blacklist))
	s.Equal("replication.factor", SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Overrides.Blacklist[0])
	s.Equal("min.insync.replicas", SpdCore.Blueprints.Blueprint.Policy.TopicPolicy.Overrides.Blacklist[1])

	s.Equal(false, SpdCore.Blueprints.Blueprint.Policy.ACLPolicy.SetupACLs)
	s.Equal("kafka_acl", SpdCore.Blueprints.Blueprint.Policy.ACLPolicy.ACLType)
	s.Equal(true, SpdCore.Blueprints.Blueprint.Policy.ACLPolicy.OptimizeACLs)

	s.Equal(3, len(SpdCore.Blueprints.Blueprint.CustomEnums))
	s.Equal("zones", SpdCore.Blueprints.Blueprint.CustomEnums[0].Name)
	s.Equal(3, len(SpdCore.Blueprints.Blueprint.CustomEnums[0].Values))
	s.Equal(false, SpdCore.Blueprints.Blueprint.CustomEnums[0].IncludeInTopicName)
	s.Equal("categories", SpdCore.Blueprints.Blueprint.CustomEnums[1].Name)
	s.Equal(2, len(SpdCore.Blueprints.Blueprint.CustomEnums[1].Values))
	s.Equal(true, SpdCore.Blueprints.Blueprint.CustomEnums[1].IncludeInTopicName)
	s.Equal("logicalEnv", SpdCore.Blueprints.Blueprint.CustomEnums[2].Name)
	s.Equal(4, len(SpdCore.Blueprints.Blueprint.CustomEnums[2].Values))
	s.Equal(false, SpdCore.Blueprints.Blueprint.CustomEnums[2].IncludeInTopicName)

	// Definitions File Validation
	os.Setenv("SHEPHERD_DEFINITIONS_FILE_LOCATION", "./testdata/definitions_0.yaml")
	os.Setenv("HOSTNAME_REPLACEMENT_TEST", "abhishek.replaced.hostname")
	err := SpdCore.Definitions.ParseShepherdDefinitions(getEnvVarsWithDefaults("SHEPHERD_DEFINITIONS_FILE_LOCATION", ""), true)
	s.Require().Nil(err, "Error while parsing the Shepherd Configurations. Other tests may not return proper errors")
	s.Equal(2, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Name))
	s.Equal(1, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Consumers))
	s.Equal("test.consumer", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Consumers[0].Hostnames[0])
	s.Equal("abhishek.replaced.hostname", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Consumers[0].Hostnames[1])
	s.Equal(4, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Producers))
	s.Equal("test.producer", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Producers[2].Hostnames[0])
	s.Equal("abhishek.replaced.hostname", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Producers[2].Hostnames[1])
	s.Equal(2, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Connectors))
	s.Equal("test.connectors", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Connectors[0].Hostnames[0])
	s.Equal("abhishek.replaced.hostname", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Connectors[0].Hostnames[1])
	s.Equal(2, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.KSQL))
	s.Equal("test.ksql", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.KSQL[0].Hostnames[0])
	s.Equal("abhishek.replaced.hostname", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.KSQL[0].Hostnames[1])
	s.Equal(2, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Streams), "Streams consumer definition parsing error")
	s.Equal("test.streams", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Streams[0].Hostnames[0])
	s.Equal("abhishek.replaced.hostname", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].Clients.Streams[0].Hostnames[1])
	s.Equal("platinum", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].TopicBlueprintEnumRef)
	s.Equal(1, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].ConfigOverrides))
	s.Equal(2, len(SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].ConfigOverrides[0]))
	s.Equal("3", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].ConfigOverrides[0]["min.insync.replicas"])
	s.Equal("20", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].ConfigOverrides[0]["test.property"])
	s.Equal("", SpdCore.Definitions.DefinitionRoot.AdhocConfigs.Topics[0].ConfigOverrides[0]["test.property.failed"])

	s.Equal(1, len(SpdCore.Definitions.DefinitionRoot.ScopeFlow))
	s.Equal("team", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].ShortName)
	s.Equal(3, len(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Values))
	s.Equal(false, SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].IncludeInTopicName)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].CustomEnumRef)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Clients)

	s.NotEmpty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.ShortName)
	s.Equal(1, len(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Topics.Name))
	s.Equal(true, SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.IncludeInTopicName)
	s.NotEmpty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Consumers)
	s.Equal(1, len(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Consumers))
	s.Equal("User:1211", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Consumers[0].Principal)
	s.Equal("hello1211", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Consumers[0].Group)
	s.NotEmpty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Consumers[0].Hostnames)
	s.NotEmpty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Producers)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Connectors)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.KSQL)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Clients.Streams)

	s.NotEmpty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child)
	s.Equal("logicalEnv", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.CustomEnumRef)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.ShortName)
	s.Equal(false, SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.IncludeInTopicName)
	s.Empty(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.Child)
	s.Equal(1, len(SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.Topics.Name))
	s.Equal("logicalenvtopictest", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.Topics.Name[0])
	s.Equal("dev", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.Topics.IgnoreScope[0])
	s.Equal("pprd", SpdCore.Definitions.DefinitionRoot.ScopeFlow[0].Child.Child.Topics.IgnoreScope[1])
}
